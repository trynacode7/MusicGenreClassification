name: Music Genre Classification using GTZAN Dataset
description: >
  Classify music recordings into genres using machine learning models trained on GTZAN features and images.
  Use the existing extracted feature CSVs (3-second and 30-second) and spectrogram images for model training.
  Compare Random Forest, SVM, and CNN models, and evaluate both batch and near-real-time prediction.

tasks:

  - name: Setup Project Structure
    description: >
      Confirm the project folder structure matches the available GTZAN data and add necessary source files.
    steps:
      - Ensure these directories exist:
        - Data/genres_original/
        - Data/images_original/
        - models/
        - results/
        - notebooks/
        - src/
      - Create these empty files if missing:
        - src/model_training.py
        - src/evaluation.py
        - src/realtime_prediction.py
        - src/utils.py
        - requirements.txt
        - README.md
      - Add `.gitignore` for __pycache__, models, and large data files.

  - name: Setup Environment
    description: >
      Initialize a Python environment and install required libraries.
    steps:
      - Create virtual environment:
        ```bash
        python -m venv venv
        ```
      - Activate environment and install:
        ```
        numpy
        pandas
        matplotlib
        seaborn
        scikit-learn
        tensorflow
        keras
        librosa
        sounddevice
        tqdm
        ```
      - Verify imports in a test script.

  - name: Prepare Data Loaders
    description: >
      Implement data loading utilities for existing feature CSVs and spectrograms.
    steps:
      - In `src/utils.py`, implement functions to:
        - Load `Data/features_3_sec.csv` and `Data/features_30_sec.csv`.
        - Encode genre labels numerically.
        - Split into train/val/test sets.
      - Confirm proper handling of missing or corrupted rows.

  - name: Train Models on Extracted Features
    description: >
      Use the 30-second feature CSV for training traditional ML models (Random Forest, SVM).
    steps:
      - Implement `src/model_training.py` to:
        - Load preprocessed data from `features_30_sec.csv`.
        - Train and evaluate:
          - RandomForestClassifier
          - SVC (with kernel='rbf')
        - Save trained models in `models/` directory as `.pkl` files.
        - Log training accuracy and F1-score.

  - name: Train CNN on Spectrogram Images
    description: >
      Train a CNN using spectrograms in `Data/images_original/` for deep learning-based classification.
    steps:
      - In `src/model_training.py`, add a CNN section to:
        - Load spectrogram images and labels from `Data/images_original/`.
        - Resize images to 128x128 or 224x224.
        - Normalize pixel values.
        - Define and train a Keras Sequential CNN model.
        - Save model as `models/cnn_model.h5`.

  - name: Evaluate Models
    description: >
      Evaluate and compare all models on the same test dataset.
    steps:
      - Implement `src/evaluation.py` to:
        - Load trained models.
        - Compute Accuracy, Precision, Recall, F1-score.
        - Generate and save confusion matrices as heatmaps in `results/`.
        - Save summary comparison in `results/model_comparison.csv`.

  - name: Implement Real-Time Prediction
    description: >
      Simulate near-real-time genre prediction from microphone input or short clips.
    steps:
      - In `src/realtime_prediction.py`, implement:
        - Audio recording or short sample reading.
        - Feature extraction (MFCC, tempo) using librosa.
        - Load best-performing model (e.g., CNN or Random Forest).
        - Predict genre label in real-time and display results.
        - Compare latency vs batch mode.

  - name: Visualization and Reporting
    description: >
      Visualize results and summarize findings in Jupyter Notebook.
    steps:
      - Create `notebooks/analysis.ipynb` to:
        - Load and plot confusion matrices.
        - Compare model accuracies with bar plots.
        - Display random spectrogram samples per genre.
      - Save visual outputs in `results/`.

  - name: Final Documentation
    description: >
      Write comprehensive documentation for reproducibility and presentation.
    steps:
      - Complete `README.md` with:
        - Overview and objectives
        - Dataset details
        - Models used
        - Evaluation metrics
        - Results summary
        - Instructions for running training and real-time prediction
      - Optionally prepare a short presentation/report with performance insights.
